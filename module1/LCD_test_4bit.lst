0000              1   ; LCD_test_4bit.asm: Initializes and uses an LCD in 4-bit mode
0000              2   ; using the most common procedure found on the internet.
                  4   $LIST
0000              6   
0000              7   org 0000H
0000 02009D       8       ljmp myprogram
0003              9   
001B             10   org 001bH
001B 02181B      11       ljmp 181bH
001E             12   
001E             13   ; These 'equ' must match the hardware wiring
001E             14   LCD_RS equ P1.4
001E             15   LCD_RW equ P1.5 ; Not used in this code
001E             16   LCD_E  equ P1.6
001E             17   LCD_D4 equ P3.2
001E             18   LCD_D5 equ P3.3
001E             19   LCD_D6 equ P3.4
001E             20   LCD_D7 equ P3.5
001E             21   
001E             22   ; When using a 22.1184MHz crystal in fast mode
001E             23   ; one cycle takes 1.0/22.1184MHz = 45.21123 ns
001E             24   
001E             25   ;---------------------------------;
001E             26   ; Wait 40 microseconds            ;
001E             27   ;---------------------------------;
001E             28   Wait40uSec:
001E C000        29       push AR0
0020 78B1        30       mov R0, #177
0022             31   L0:
0022 00          32       nop
0023 00          33       nop
0024 D8FC        34       djnz R0, L0 ; 1+1+3 cycles->5*45.21123ns*177=40us
0026 D000        35       pop AR0
0028 22          36       ret
0029             37   
0029             38   ;---------------------------------;
0029             39   ; Wait 'R2' milliseconds          ;
0029             40   ;---------------------------------;
0029             41   WaitmilliSec:
0029 C000        42       push AR0
002B C001        43       push AR1
002D 792D        44   L3: mov R1, #45
002F 78A6        45   L2: mov R0, #166
0031 D8FE        46   L1: djnz R0, L1 ; 3 cycles->3*45.21123ns*166=22.51519us
0033 D9FA        47       djnz R1, L2 ; 22.51519us*45=1.013ms
0035 DAF6        48       djnz R2, L3 ; number of millisecons to wait passed in R2
0037 D001        49       pop AR1
0039 D000        50       pop AR0
003B 22          51       ret
003C             52   
003C             53   ;---------------------------------;
003C             54   ; Toggles the LCD's 'E' pin       ;
003C             55   ;---------------------------------;
003C             56   LCD_pulse:
003C D296        57       setb LCD_E
003E 12001E      58       lcall Wait40uSec
0041 C296        59       clr LCD_E
0043 22          60       ret
0044             61   
0044             62   ;---------------------------------;
0044             63   ; Writes data to LCD              ;
0044             64   ;---------------------------------;
0044             65   WriteData:
0044 D294        66       setb LCD_RS
0046 02004E      67       ljmp LCD_byte
0049             68   
0049             69   ;---------------------------------;
0049             70   ; Writes command to LCD           ;
0049             71   ;---------------------------------;
0049             72   WriteCommand:
0049 C294        73       clr LCD_RS
004B 02004E      74       ljmp LCD_byte
004E             75   
004E             76   ;---------------------------------;
004E             77   ; Writes acc to LCD in 4-bit mode ;
004E             78   ;---------------------------------;
004E             79   LCD_byte:
004E             80       ; Write high 4 bits first
004E A2E7        81       mov c, ACC.7
0050 92B5        82       mov LCD_D7, c
0052 A2E6        83       mov c, ACC.6
0054 92B4        84       mov LCD_D6, c
0056 A2E5        85       mov c, ACC.5
0058 92B3        86       mov LCD_D5, c
005A A2E4        87       mov c, ACC.4
005C 92B2        88       mov LCD_D4, c
005E 12003C      89       lcall LCD_pulse
0061             90   
0061             91       ; Write low 4 bits next
0061 A2E3        92       mov c, ACC.3
0063 92B5        93       mov LCD_D7, c
0065 A2E2        94       mov c, ACC.2
0067 92B4        95       mov LCD_D6, c
0069 A2E1        96       mov c, ACC.1
006B 92B3        97       mov LCD_D5, c
006D A2E0        98       mov c, ACC.0
006F 92B2        99       mov LCD_D4, c
0071 12003C     100       lcall LCD_pulse
0074 22         101       ret
0075            102   
0075            103   ;---------------------------------;
0075            104   ; Configure LCD in 4-bit mode     ;
0075            105   ;---------------------------------;
0075            106   LCD_4BIT:
0075 C296       107       clr LCD_E   ; Resting state of LCD's enable is zero
0077 C295       108       clr LCD_RW  ; We are only writing to the LCD in this program
0079            109   
0079            110       ; After power on, wait for the LCD start up time before initializing
0079            111       ; NOTE: the preprogrammed power-on delay of 16 ms on the AT89LP52
0079            112       ; seems to be enough.  That is why these two lines are commented out.
0079            113       ; Also, commenting these two lines improves simulation time in Multisim.
0079            114       ; mov R2, #40
0079            115       ; lcall WaitmilliSec
0079            116   
0079            117       ; First make sure the LCD is in 8-bit mode and then change to 4-bit mode
0079 7433       118       mov a, #0x33
007B 120049     119       lcall WriteCommand
007E 7433       120       mov a, #0x33
0080 120049     121       lcall WriteCommand
0083 7432       122       mov a, #0x32 ; change to 4-bit mode
0085 120049     123       lcall WriteCommand
0088            124   
0088            125       ; Configure the LCD
0088 7428       126       mov a, #0x28
008A 120049     127       lcall WriteCommand
008D 740C       128       mov a, #0x0c
008F 120049     129       lcall WriteCommand
0092 7401       130       mov a, #0x01 ;  Clear screen command (takes some time)
0094 120049     131       lcall WriteCommand
0097            132   
0097            133       ;Wait for clear screen command to finish. Usually takes 1.52ms.
0097 7A02       134       mov R2, #2
0099 120029     135       lcall WaitmilliSec
009C 22         136       ret
009D            137   
009D            138   ;---------------------------------;
009D            139   ; Main loop.  Initialize stack,   ;
009D            140   ; ports, LCD, and displays a      ;
009D            141   ; letter on the LCD              ;
009D            142   ;---------------------------------;
009D            143   myprogram:
009D 75817F     144       mov SP, #7FH
00A0 75C100     145       mov PMOD, #0 ; Configure all ports in bidirectional mode
00A3 120075     146       lcall LCD_4BIT
00A6 7480       147       mov a, #0x80 ; Move cursor to line 1 column 1
00A8 120049     148       lcall WriteCommand
00AB 7441       149       mov a, #'A'
00AD 120044     150       lcall WriteData
00B0 74C2       151       mov a, #0xC2 ; Move cursor to line 2 column 3
00B2 120049     152       lcall WriteCommand
00B5 7442       153       mov a, #'B'
00B7 120044     154       lcall WriteData
00BA            155   forever:
00BA 80FE       156       sjmp forever
00BC            157   EN
